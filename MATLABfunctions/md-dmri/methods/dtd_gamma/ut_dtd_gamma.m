function fn = ut_dtd_gamma(c_ut)
% function fn = ut_dtd_gamma(c_ut)
%
% if c_ut is not supplied, the function returns the number of unit tests

% n_ut = number of unit tests
n_ut = 5;

if (nargin < 1), fn = n_ut; return; end

switch c_ut
    
    case 1 
        % UT of simplest case where LTE and STE are used with a single
        % baseline signal.
        
        fn  = 'dtd_gamma_1d_data2fit.m';
        opt = dtd_gamma_opt;
        
        tissue      = [100 .9e-9 0.4e-18 0.8e-18];
        
        xps.b = 1e9 * [0 1 2 3 0 1 2 3]';
        xps.b_delta = [1 1 1 1 0 0 0 0]';
        xps.b_eta   = [0 0 0 0 0 0 0 0]';
        xps.n       = numel(xps.b);
        xps.pa_w    = 1;
        
        % Signal generated by running:
        % signal = dtd_gamma_1d_fit2data(tissue, xps)
        signal      = [100 56.4437 41.6022 33.7439 ...
                       100 47.4904 27.5856 17.9824]';
        
        t = dtd_gamma_1d_data2fit(signal, xps, opt);
        
        E = (t-tissue)./(tissue + eps);
        
        if (any(abs(E) > 0.001)) % 0.1% threshold
            error('%s, ut_dtd_gamma test %i, fit returns unexpected values!', fn, c_ut);
        end
        
    
    case 2 
        % UT of a simple LTE, STE and PTE fitting where STE and LTE have
        % 20% higher and 10% lower baseline signal, respectively.
           
        fn  = 'dtd_gamma_1d_data2fit.m';
        opt = dtd_gamma_opt;
        
        tissue      = [100 .9e-9 0.4e-18 0.8e-18 1.2 0.9];
        
        xps.b = 1e9 * [0 1 2 3 0 1 2 3   0   1   2]';
        xps.b_delta = [1 1 1 1 0 0 0 0 -.5 -.5 -.5]';
        xps.b_eta   = [0 0 0 0 0 0 0 0   0   0   0]';
        xps.s_ind   = [1 1 1 1 2 2 2 2   3   3   3]';
        xps.n       = numel(xps.b);
        xps.pa_w    = 1;
        
        % Signal generated by running:
        % signal = dtd_gamma_1d_fit2data(tissue, xps)
        signal      = [100 56.4437 41.6022 33.7439 ...  % LTE
                       120 56.9885 33.1027 21.5788 ...  % STE
                        90 45.1592 28.6730]';           % PTE
        
        t = dtd_gamma_1d_data2fit(signal, xps, opt);
        
        E = (t-tissue)./(tissue + eps);
        
        if any(abs(E) > 0.001) % 0.1% threshold
            error('%s, ut_dtd_gamma test %i, fit returns unexpected values!', fn, c_ut);
        end
        
        
    case 3
        % Check that the fitting works for a reasonably wide range of
        % tissue values. Threshold is raised to 1% because Viso is usually
        % overestimated when MD is high and Viso is low.

        fn  = 'dtd_gamma_1d_data2fit.m';
        opt = dtd_gamma_opt;
        opt.dtd_gamma.fit_iters = 3;
        
        xps.b = 1e9 * [0 1 2 3 0 1 2 3]';
        xps.b_delta = [1 1 1 1 0 0 0 0]';
        xps.b_eta   = [0 0 0 0 0 0 0 0]';
        xps.n       = numel(xps.b);
        xps.pa_w    = 1;
        
        tissue      = [...
                        [100  .4e-9 0.01e-18 0.01e-18] % Low MD
                        [100 3.0e-9 0.01e-18 0.01e-18] % High MD
                        [100  .9e-9 0.01e-18 0.80e-18] % Low Viso, high Vaniso
                        [100  .9e-9 0.80e-18 0.01e-18] % Low Viso, high Vaniso
                      ];
        
        % Signal generated by running:
        % signal = dtd_gamma_1d_fit2data(tissue, xps)
        signal      = [...
                        [100 67.6839 46.6507 32.6902 100 67.3625 45.8112 31.4387]
                        [100  5.0285  0.2579  0.0135 100  5.0036  0.2529  0.0129]
                        [100 52.6316 35.7143 27.0270 100 40.8593 16.8589  7.0230]
                        [100 52.6316 35.7143 27.0270 100 52.5220 35.5432 26.8334]
                      ];
        
        for i = 1:size(tissue, 1)
            t = dtd_gamma_1d_data2fit(signal(i,:)', xps, opt);
            E = (t-tissue(i,:))./(tissue(i,:) + eps);
            if any(abs(E) > 0.01) % 1% threshold
                error('%s, ut_dtd_gamma test %i, fit returns unexpected values!', fn, c_ut);
            end
        end
        
        
    case 4
        % Check if the powder average weighting is functional. The premise
        % is that the fitting should yield the same result for non-powder
        % and powder-averaged data if the correction for heteroscedasticity 
        % is correct.
        
        fn  = 'dtd_gamma_1d_data2fit.m';
        opt = dtd_gamma_opt;
        opt.dtd_gamma.do_pa_weight = 1; % do_pa_weight must be true for this test.
        
        xps.b       = [0 1 2 2 2 3 3 3 3 3 3]' * 1e9;
        xps.b_delta = [0 1 1 0 0 1 1 1 0 0 0]';
        xps.b_eta   = [0 0 0 0 0 0 0 0 0 0 0]';
        xps.n       = numel(xps.b);
        xps.pa_w    = ones(size(xps.b));

        % Signal is impossible to fit perfectly on purpose.
        signal      = [100 55 40 30 30 35 35 35 15 15 15]';
        I (1,1,1,:) = signal;
        
        % Here we calculate the corresponding powder average.
        I_pa      = mio_pa(I, xps);
        signal_pa = squeeze(I_pa);
        xps_pa    = mdm_xps_pa(xps);
        
        % Fit both types of data (should be the same).
        t    = dtd_gamma_1d_data2fit(signal   , xps   , opt);
        t_pa = dtd_gamma_1d_data2fit(signal_pa, xps_pa, opt);
        
        E = (t-t_pa)./(t+eps);
        
        if any(abs(E) > 0.001) % 0.1% threshold
            error('%s, ut_dtd_gamma test %i, powder average and non-powder data render different results!', fn, c_ut);
        end
        
        
    case 5
        % Test performance of estimating negative variances
                
        fn  = 'dtd_gamma_1d_data2fit.m';
        opt = dtd_gamma_opt;
        
        % Make sure to allow negative variances
        opt.dtd_gamma.fit_lb = [  0 1e-12 -[1 1]*4e-18 ];
        opt.dtd_gamma.fit_ub = [ 10 4e-9   [1 1]*4e-18 ];
        
        tissue      = [100 .9e-9 -0.1e-18 -0.2e-18];
        
        xps.b = 1e9 * [0 1 2 3 0 1 2 3]';
        xps.b_delta = [1 1 1 1 0 0 0 0]';
        xps.b_eta   = [0 0 0 0 0 0 0 0]';
        xps.n       = numel(xps.b);
        xps.pa_w    = 1;
        
        % Signal generated by running:
        % signal = dtd_gamma_1d_fit2data(tissue, xps)
        signal      = [100 33.4621  5.1496 0.0000 ...
                       100 38.5181 13.0596 3.7468]';
        
        t = dtd_gamma_1d_data2fit(signal, xps, opt);
        
        E = (t-tissue)./(tissue + eps);
        
        if (any(abs(E) > 0.001)) % 0.1% threshold
            error('%s, ut_dtd_gamma test %i, fit returns unexpected values!', fn, c_ut);
        end
        
        
    otherwise
        error('No such test is defined!');
        
end




% Regularized ILT according to recipe in% Provencher SW. CONTIN: A general purpose constrained regularization program for inverting noisy linear algebraic and integral equations. Computer Phys Comm 1982;27:229-242.% Whittal KP, MacKay AL. Quantitative interpretation of NMR relaxation data. J Magn Reson 1989;84:134-152.clear all% Acquisition protocolxps.n = 16;xps.b = 6e9*linspace(.02,1,xps.n)'.^2;xps.b_delta = ones(xps.n,1); % Generate signal for Pake distribution of effective diffusivitiess0 = 1;dpar = 1.5e-9;dperp = 10e-11;snr = 100;diso = (dpar + 2*dperp)/3;ddelta = (dpar - dperp)/3/diso;m = [s0 diso ddelta];s = dtd_pake_1d_fit2data(m, xps) + 1/snr*randn(xps.n,1); %Eq (34) from Eriksson S, Lasi? S, Nilsson M, Westin C-F, Topgaard D. NMR diffusion encoding with axial symmetry and variable anisotropy: Distinguishing between prolate and oblate microscopic diffusion tensors with unknown orientation distribution. J Chem Phys 2015;142:104201.   %figure(1), clf, semilogy(xps.b,s,'o'), return% Inversionb = xps.b;I = s;M = 100;D = linspace(0,3e-9,M+1)';mu = 1;lambda = 1e1;SmoothMode = 4;N = length(b);dD = diff(D);D = D(1:M) + dD/2;[~,Darray] = ndgrid(b,D);[barray,dDarray] = ndgrid(b,dD);A = 1./Darray.*dDarray.*exp(-barray.*Darray);L = [1 zeros(1,(M-1)); zeros(1,(M-1)) 1];l = zeros(2,1);if SmoothMode==1	H = []; f = [];elseif SmoothMode==2	H = eye(M,M); f = zeros(M,1);elseif SmoothMode==3	H = [-eye((M-1),M) zeros((M-1),1)] + [zeros((M-1),1) eye((M-1),M)]; H(:,(M+1))=[]; f = zeros((M-1),1);elseif SmoothMode==4	H = [eye((M-2),M) zeros((M-2),2)] + [zeros((M-2),1) -2*eye((M-2),M) zeros((M-2),1)] + [zeros((M-2),2) eye((M-2),M)]; H(:,(M+1):(M+2))=[]; f = zeros((M-2),1);endPD = lsqnonneg(A,I);Icalc = A*PD;chisq = sum((Icalc-I).^2);chisq0 = chisq;I = I/sqrt(chisq);muall = mu*logspace(-5,2,50);for n = 1:length(muall)    mu = muall(n);    PD = lsqnonneg([A; mu*H; lambda*L],[I; f; l]);    Icalc = A*PD;    error = I - Icalc;    I0 = sum(PD./D.*dD);    D0 = sum(D.*PD./D.*dD)/I0;    D2 = sum(D.^2.*PD./D.*dD)/I0;    Iinit = I0*exp(-b*D0);    chisq = sum((Icalc-I).^2);    chisqsmooth = sum((f - mu*H*PD).^2);    chisqedge = sum((l - lambda*L*PD).^2);    figure(1), clf    axes('position',[0.1 0.27 0.8 0.65])    semilogy(b,I/I0,'o',b,Icalc/I0,b,Iinit/I0), grid    title(['D0 = ' num2str(D0) ' m^2/s'])    xlabel('b / s/m^2'), ylabel('I/I_0')    axis([min(b) max(b) min(I/I0) max(I/I0)])    axes('position',[0.58 0.58 0.3 0.3])    plot(D,PD/I0,'-ob',[D0 D0],max(PD/I0)*[-.2 1.2],'r')    axis([min(D) max(D) max(PD+eps)/I0*[-.2 1.2]]), grid    xlabel('D / m^2/s'), ylabel('P(D)')    axes('position',[0.1 0.05 0.8 0.1])    plot(b,error,'o'), grid    ylabel('residual')    title(['mean error = ' num2str(mean(error)) '   std error = ' num2str(std(error))])    pause(.1)        PDall(:,n) = PD;    chisqall(n) = chisq;    chisqsmoothall(n) = chisqsmooth;    chisqedgeall(n) = chisqedge;end%%chisqratio = chisqall/min(chisqall);pos = find(chisqratio>1.01);pos = min(pos)-1;% chisqdiff = chisqsmoothall - chisqall;% pos = find(chisqdiff>0);% pos = min(pos)-1;PD = PDall(:,pos);Icalc = A*PD;I0 = sum(PD./D.*dD);D0 = sum(D.*PD./D.*dD)/I0;D2 = sum(D.^2.*PD./D.*dD)/I0;mu = muall(pos);Iinit = I0*exp(-b*D0);figure(1), clfsubplot(2,2,1)semilogy(b,I/I0,'o',b,Icalc/I0,b,Iinit/I0), gridxlabel('b / sm^-^2'), ylabel('I/I_0')axis([min(b) max(b) min(I/I0) max(I/I0)])subplot(2,2,3)plot(D,PD/I0,'-ob',[D0 D0],max(PD)/I0*[-.2 1.2],'r')axis([min(D) max(D) max(PD+eps)/I0*[-.2 1.2]]), gridtitle(['D_0 = ' num2str(D0,3) ' m^2/s'])xlabel('D / m^2s^-^1'), ylabel('P(D)')subplot(2,2,2)loglog(muall,chisqall*chisq0,'-o',muall,chisqsmoothall*chisq0,'-o',muall,chisqedgeall*chisq0,'-o',mu*[1 1],min(chisqall*chisq0)*[.1 10],'k')axis([min(muall) max(muall) min(chisqall*chisq0)*[.1 10]])xlabel('\mu'), ylabel('\chi^2')legend('fit','smooth','edge','Location','NorthWest')gridsubplot(2,2,4)surf(log10(muall),D,PDall), view(0,90), shading('interp')colormap('hot')xlabel('\mu'), ylabel('D / m^2s^-^1'), title('P(D)')axis('tight')Ntheta = 2e2;theta = linspace(0,pi/2,Ntheta+1);dtheta = diff(theta);theta = theta(1:Ntheta) + dtheta/2;Ptheta = sin(theta);Ptheta = Ptheta./sum(Ptheta.*dtheta,2);sigma = 3e-11;Dpar = dpar;Dperp = dperp;Dtheta = Dpar*cos(theta).^2 + Dperp*sin(theta).^2;[~, Dthetaarray] = ndgrid(D, Dtheta);[Darray, Pthetaarray] = ndgrid(D, Ptheta);[dDarray, dthetaarray] = ndgrid(dD, dtheta);D0 = Dthetaarray/exp(sigma^2/2);SD = 1./(sigma*sqrt(2*pi)).*exp(-.5*(Darray-Dthetaarray).^2./sigma.^2);PD_true = sum(SD.*Pthetaarray.*dthetaarray,2);PD_true = PD_true/sum(PD_true)*sum(PD);fs = 8;lw = 1;figure(2), clfaxh1 = axes('position',[.17 .2 .33 .7]);ph11 = semilogy(b/1e9,I/I0,'bo');hold(axh1,'on')ph12 = semilogy(b/1e9,Icalc/I0,'k-','LineWidth',2*lw);set(axh1,'YLim',[.09 1.1],'XLim',max(b/1e9)*[-.1 1.1])xlabel('b / 10^9 sm^-^2','FontSize',fs), ylabel('S/S_0','FontSize',fs)axh2 = axes('position',[.65 .2 .33 .7]);ph21 = plot(D/1e-9,PD,'k-','LineWidth',2*lw);hold(axh2,'on')ph21 = plot(D/1e-9,PD_true,'b-','LineWidth',lw);set(axh2,'YLim',max(PD)*[-.1 2],'XLim',max(D/1e-9)*[-.1 1.1])xlabel('D / 10^{-9} m^2s^-^1','FontSize',fs), ylabel('P(D)','FontSize',fs)set([axh1; axh2],'Box','off','TickDir','out','FontSize',fs,'LineWidth',lw,'TickLength',.02*[1 1])lh = legend(axh2,'ILT','Pake');set(lh,'FontSize',fs,'Box','off')aspect = 1.618;set(gcf, 'PaperUnits','centimeters','PaperPosition', 1*8.3*[0 0 1 1/aspect],'PaperSize', 1*8.3*[1 1/aspect]);eval(['print CONTIN_Pake -dpdf -loose'])